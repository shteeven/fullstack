
                          Tournament: Swiss Pairings

  What is it?
  -----------

  This is the second project in Udacity's Fullstack Nanodegree Program. The
  main module, tournament.py, holds a series of functions that perform various
  tasks on a postgresql database. This module contains all the functions needed
  to host and run a tournament, including create, modify, and delete the
  members, players in a tourney, or match records. Most importantly is the
  Swiss pairing function, which ensures the players are paired fairly and
  relatively evenly throughout a tournament and that no players play each other
  twice or have two rounds with a 'bye'.

  How does it work?
  ------------------

  The pairing algorithm, swissPairing(), relies on several other functions to
  run; initialPairings(), subsequentPairings(), remainingOpponents(), and
  recursivePairFinder().
  --swissPairings: checks to see if tourney is in progress, adds a 'BYE' if player
  count is odd, and runs either initialPairings or subsequentPairings based on
  whether tournament is in progress.
  The initial pairings splits the players in half and pairs each with the adjacent
  player; for 6 players, ordered from highest seeded to lowest, this would
  result in a table of [A,B,C,D,E,F] being paired as [(A,D),(B,E),(C,F)]. This
  ensures strong players are not put against each other in the first round, and
  makes sure the stronger players have higher opponent match wins where there
  are ties.
  The subsequent pairings runs a set of players, ordered by wins, then seedings,
  through the recursivePairFinder.
  --recursivePairFinder: continuously removes a successful every time it goes
  deeper. When the list of players is emptied, the pair that what removed is
  added to the pair_list on the way back up. The list of possible pairs is
  generated by the remainingOpponents function.
  --remainingOpponents: queries the players and matches tables to find players
  that the currently selected player, passed in from recursivePairFinder, has
  not yet played against. These are ordered by the difference between
  the player's and opponent's scores, and then by the seed score. This is done
  to ensure that players are put against their most even matches towards the
  end of the tournament.


  Documentation
  -------------

  'python serve.py'
  To view a compiled site, simply run serve.py. This file depends on this file
  structure:
    movie project/
    |-- README.txt
    |-- test.py
    |-- tournament.py
    |-- tournament.sql

  Installation
  ------------

  Run `psql -f tournament.sql` to create the database and tables. Ignore the
  errors that say database and tables do not exit the first time this is ran;
  these are just an attempt to drop any existing database and tables from
  previous sessions.

  Contacts
  --------

     o Contact me at school.kde@gmail.com or have a look at my current tinkering
       at shtav.com